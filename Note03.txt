复习:
	1.注释:在程序中解释说明的文字 // /* */ /** */
	2.计算机常量:整数/小数/字符/字符串/布尔/空
	3.进制:二进制--0b / 八进制--0 / 十六进制--0x ; 要求掌握进制的换算
	4.变量:先定义后使用,先赋值后使用,在哪儿定义在哪儿使用
	5.数据类型:基本类型---byte/short/int/long/float/double/char/boolean,引用类型---数组/类/接口
	6.数据的转换:自动转换(小转大/整转小)/强制转换
	7.运算符:算术运算符/赋值运算符

关系运算符
	==, !=, >, <, >=, <=
	instanceof---关键字---判断对象和类的关系的---不能判断基本类型
	System.out.println("abc" instanceof String); ---true

逻辑运算符
	&, |, !, ^, &&, ||
	||能把&&短路,&&不能把||短路

位运算符
	注意:位运算符针对的是整数的补码
	&:将数据转化为其补码形式,然后低位次对齐,将1看作true,将0看作false,按位与操作,最后将结果转化为10进制显示
	任何一个数&偶数=偶数
	判断一个数奇偶性
	任何一个数|奇数=奇数
	a ^ a = 0, a ^ 0 = a -> a ^ b ^ b = a 

	<<:将数据转换为补码之后,按照指定的位数向左移动,高位次移出的部分舍弃,低位次空出补0,最后将数据转化为十进制显示
	在一定范围内,左移几位就是乘以2的几次方
	>>:将数据转换为补码之后,按照指定的位数向右移动.低位次移出的部分舍弃,高位空出,如果是整数则补0,如果是负数就补1,最后将数据转化为十进制显示
	在一定范围内,右移几位就是除以2的几次方
	>>>:将数据转化为补码之后,按照指定位数右移,低位次移出的部分舍弃,高位次无论正负一律补0
	~:将数据转换为补码之后,无论高低位,0变1,1变0,最后将数据转化为十进制显示.~i == - i - 1

	交换两个变量的值:int 1 = 3, j = 7;

		第一种方式:利用第三方变量---追尾法
		int temp = i;
		i = j;
		j = temp;

		第二种方式:加减法
		i = i + j;
		j = i - j;
		i = i - j;

		第三种方式:异或法
		i = i ^ j;
		j = i ^ j;
		i = i ^ j;

	快速判断一个数是不是2^n --- n & (n - 1) == 0
	快速算(2 ^ n - 1) & x == x % (2 ^ n)

三元运算符
	逻辑值 ? 表达式1 : 表达式2
	执行顺序:如果逻辑值为true,执行表达式1;反之,执行表达式2
	三元运算一定有结果,结果可以用变量来接住,两个表达式结果的类型要么一致,要么其中一个能够自动转化为另一个

从控制台输入数据
	import java.util.Scanner;
	Scanner sc = new Scanner(System.in);
	int n = sc.nextInt();			//输入整数
	double d = sc.nextDouble();		//输入小数
	String str = sc.next();			//输入字符串
	String str2 = sc.nextLine();	//输入字符串

流程控制:指程序从上到下从左到右来依次编译运行的
	分支结构
		判断结构

			if(逻辑表达式){
				代码块;
			}
			执行顺序:如果逻辑表达式值为true,则执行代码块,反之则不执行

			if(逻辑表达式1){
				代码块1;
			}else{
				代码块2;
			}
			执行顺序:如果逻辑表达式值为true,则执行代码块1,反之则执行代码块2

			if(逻辑表达式1){
				代码块1;
			}else if(逻辑表达式2){
				代码块2;
			}else{
				代码块3;
			}

		选择结构

			switch(选项){
			case 情况1:Code;break;
			case 情况2:Code;break;
			...
			default:Code;break;
			}
			选项所允许的类型byte/short/char/int,从JDK1.7开始,允许使用String
			如果case之后没有break,会从匹配到的case开始顺次往下执行;知道遇到break或者switch语句结束
			如果每一个case之后都有break,那么这个时候case之间的顺序不影响结果;如果有一个或以上case之后没有break,case的顺序影响结果.

		循环结构

			while(逻辑值){
				代码块;
			}