复习:
	1.循环结构:while, for --- 循环的嵌套
	2.break和continue:break可以用于循环和选择结构,continue只能用于循环结构
	3.数组
		定义格式---3种
		数组的内存---Java将内存分为了5块:栈内存,堆内存,方法区,本地方法栈,寄存器---数组是存在堆内存中的.会自动的赋予默认值
	4.数组的应用
		1)获取数组的元素
		2)数组的长度
		3)遍历数组
		4)获取最值
		5)数组的排序---冒泡排序:时间复杂度O(n^2),空间复杂度O(1)

选择排序

Arrays.sort()---时间复杂度O(nlogn)

数组的反转
	for(int start = 0, end = arr.length - 1; start < end; start++, end--){
		int temp = arr[start];
		arr[start] = arr[end];
		arr[end] = temp;
	}

数组元素的查询
	二分查找---时间复杂度O(logn), 空间复杂度O(1)

数组的复制
	System.arraycopy(要复制的数组, 要复制的起始下标, 要存放的数组, 要存放的起始下标)
	数组的扩容/缩容---本质上就是数组的复制,所以扩容之后地址必然发生了改变
	Arrays.copyOf(要扩容的数组, 扩容之后的长度);

二维数组
	存储数组的数组---二维数组---二维数组中的每一个元素实际上是一个一维数组
	定义格式
		数据类型[][] 数组名 = new 数据类型[二维数组的长度][包含的一维数组的长度];
		int[][] arr = new int[3][5]; --- 定义包含3个一维的整型数组,每个一维数组能存储5个整数

		数据类型[][] 数组名 = new 数据类型[二维数组的长度][];
		int[][] arr = new int[3][]; --- 定义了包含3个一维的整型数组,没有规定每一个一维数组的大小
		arr[0] = new int[3];
		arr[1] = new int[7];
		arr[2] = new int[5];

		数据类型[][] 数组名 = {{一维数组1}, {一维数组2}, {一维数组3}, ...{一维数组n}};
		int[][] arr = {{2,4}, {1,2,3,5,7}, {8}, {8,4,3,0}};

		如果没有给二维数组中对应的一维数组定义大小,那么针对这个一维数组操作会出现空指针异常---NullPointerException

方法/函数
	将一段代码/逻辑提取出来进行包装,这种包装形式就称之为方法/函数---为了方便重复利用这段代码
	定义格式
		修饰符 返回值类型 方法名(参数列表){
			代码块;
			return 返回值;
		}

方法的递归
	方法在栈中执行
	当方法执行的时候需要在栈中占用一部分空间,当递归的次数比较多的时候,会耗费大量的内存.如果栈内存不够用了就会出现栈溢出错误---StackOverFlowError

IDE智能开发工具
	JCreator---过时
	Eclipse --- 日食 --- 绿色的,开源的,免费的,基于插件的 --- 要求必须安装了JDK
	Luna(1.5-1.7) --- Mars(1.5-1.8) --- Neon2(1.8) --- Neon(1.8-1.9) --- Oxygen(1.10)
	MyEclipse --- 适合于Web开发 --- 收费
	IntelliJ --- IDEA --- 适合于Web,Maven管理以及代码重构性比MyEclipse要好很多 --- 收费
	alt + / --- 提示键
	ctrl + d --- 删除一行
	ctrl + shift + o ---导包

方法的传值和方法的重载