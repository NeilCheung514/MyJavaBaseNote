复习:
	1.关系运算符: ==
	2.逻辑运算符: ^ && || ---短路特性
	3.位运算: & | ^ << >> >>> ~ ---针对的是整数的补码
	4.三元运算符: 逻辑值 ? 表达式1 : 表达式2;
		总结:运算符的优先级
		() ++ -- ~ ! 算术 << >> >>> 关系  逻辑 & | ^ 三元 赋值
		++ -- ~ ! ---一元运算符---一元运算 > 二元运算 > 三元运算
	5.判断结构: if, if-else, if-else if-else
	6.选择结构: switch-case---byte/short/char/int/String
		while(逻辑值){
			Code;
		}

		do{
			Code;
		}while(逻辑值);

		for(;;){
			Code;
		}
		如果使用小数作为判断条件,尽量减少相等或不等的判断

		break和continue
		break可以在选择和循环结构中使用,表示终止一层循环
		continue只能用在循环结构中,表示跳出本次循环,进入下次循环
		在Java中,break和continue支持标号形式

数组:
	存储多个同一类型的数据的容器---大小是固定的
	会对数组中的元素自动的进行编号,编号从0开始的---下标
	定义格式
		数据类型[] 数组名 = new 数据类型[规定数组的长度] --- 动态初始化
		int[] arr = new int[5];---表示定义了一个能存储5个整型元素的数组
		arr[2] = 5; ---表示向arr数组中下标为2的位置放入元素5
		System.out.println(arr[2]); ---表示打印arr数组中下标为2的元素

		数据类型[] 数组名 = new 数据类型[]{元素1, 元素2, 元素3, ... , 元素n}; ---静态初始化
		int[] arr = new int[]{2, 5, 1, 6, 4, 8}; ---同时规定了数组的长度就是6

		数据类型[] 数组名 = {元素1, 元素2, 元素3, ... , 元素n}; ---静态初始化
		int[] arr = {2, 5, 1, 6, 4, 8}; ---不能分开定义

		注意:[]在前,紧跟数据类型;[]在后,紧跟具体的变量的

		内存
			Java将内存分为了5块:栈内存/堆内存/方法区/本地方法栈/寄存器
			栈内存:存储变量的.栈内存不会自动给变量赋值.而且变量用完之后会从栈内存中立即移除以释放内存空间
			堆内存:存储的是数组或者对象.碰到new关键字的时候会到堆内存中开辟空间.堆内存会堆存入其中的元素自动赋予一个默认值---byte/short/int-0, long-0L, float-0.0f, double-0.0, char-'\u0000', boolean-false,除了这八种基本类型以外的所有的类型的默认值都是null.堆内存中的数据用完之后会在不定的某个时刻被回收.

		数组的应用
			1.获取数组的元素---数组名[下标]
			2.获取数组的长度---数组名.length
			3.遍历数组
				普通for循环遍历
				int[] arr = {24, 1, 4, 5};
				for(int i = 0; i < arr.length; i++){
					System.out.println(arr[i]);
				}
				增强for循环遍历---只能遍历数组,不能改变数组中的元素
				int[] arr = {24, 1, 4, 5};
				for(int i : arr){
					System.out.println(i);
				}
				将数组所有元素取出并用,隔开,拼接成一个字符串显示
				int[] arr = {24, 1, 4, 5};
				System.out.println(Arrays.toString(arr));
			4.获取数组中的最值
			5.数组排序:
				冒泡排序:相邻的两个元素两两比较,如果是从小到大排序,那么如果前一个元素大于了右一个元素,则交换两个元素的位置.---时间复杂度O(n^2), 空间复杂度O(1)

				时间复杂度:把必然执行的一段代码的执行时间认为是单位1,执行这个单位1的次数的最高阶项就是时间复杂度.时间复杂度不考虑系数

				空间复杂度:执行一段代码所额外耗费的空间就称之为空间复杂度