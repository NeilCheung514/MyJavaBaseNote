复习:
1.Java技术结构
2.Java的跨平台:JVM是Java能够跨平台的前提---Java语言是跨平台的,JVM不是跨平台大的
3.环境变量的配置:JAVA_HOME=JDK的安装目录  PATH=%JAVA_HOME%/bin;
4.javac -d 路径---编译
5.java -cp 路径 包名.类名---运行
6.关键字:53个---const,goto---关键字都是小写
7.标识符:字母,数字,_,$组成,不建议使用$,数字不能开头,不能使用关键字,见名知意,大小写敏感

注释
	在代码中解释程序的文字
	// 注释文字     ---单行注释
	/* 注释文字 */  ---多行注释
	/** 注释文字 */ ---文档注释---可以利用javadoc将注释内容提取出来形成文档----只能放在类或者函数上,javadoc命令					   只能用于提取公共类

计算机常量
	本身不可改变的量
	整数常量:所有的整数
	小数常量:所有的小数
	字符常量:将一个符号用''标志起来就构成一个字符常量
	字符串常量:将多个字符用""标志起来就构成了一个字符串常量
	布尔常量:只有两个值---true/false---用于表示逻辑值
	空常量:null

考虑:2---整数, 2.0---小数, '2'---字符, "2"---字符串, '2.0'---非法, "2.0"---字符串 分别是什么常量?

进制
	计数方式
		二进制:0-1,满2进1,在JDK1.7以前Java代码中不允许直接表示二进制数字,从JDK1.7开始允许再代码中使用二进制数字,要求以0b/0B开头---Binary---Bin
		八进制:0-7,满8进1 以0开头标志八进制数字---Octal---Oct
		十进制:0-9,满10进1 代码中默认十进制---Decimal---Dec
		十六进制:0-9,A-F/a-f,满16进1 以0x/0X开头标志十六进制数字---Hex
	进制转换
		十进制转换成二进制:不断地除以2取余数,将余数倒排
		二进制转换成十进制:从低位次开始,每一位乘以2的位次之幂,将积求和
		十进制转化为其它进制:就是除以对应的进制然后取余倒排
		其他进制转化为十进制:乘以对应进制的位次次幂然后求和
		二进制转换成八进制:从低位次开始,每三位化为一组,产生一个八进制数字,最高位不足三位则补0---三变一
		八进制转换成二进制:一变三
		二进制转换成十六进制:从低位次开始,每四位化为一组,产生一个十六进制数字,最高为不足四位则补0---四变一
		十六进制转换成二进制:一变四

变量
	存储数据的
	定义格式:数据类型 变量名 = 数据; int i = 6;
	变量名不能重复
	int i, j, k;---允许一次性定义多个同一类型的变量,用,隔开
	变量先定义后使用,先给值后使用,在哪儿定义在哪儿用

扩展:每一个二进制数字称之为以为(bit---b)--->字节(Byte---B)---1B=8b  1KB=1024B=2^10B  1MB=1024KB->GB->TB

数据类型
	基本数据类型:
		数值型:
			整数型:
				byte   --- 字节型 --- 1个字节 --- -2^7~2^7-1   --- -128~127
				short  --- 短整型 --- 2个字节 --- -2^15~2^15-1 --- -32768~32767 ---几乎不用
				int    --- 整型   --- 4个字节 --- -2^31~2^31-1 --- int j = 3_186_485_318;从JDK1.7开始
				long   --- 长整型 --- 8个字节 --- -2^63~2^63-1 --- 后边添加L/l标志长整型
			浮点型:
				float  --- 单精度 --- 4个字节 --- -10^38~10^38   --- 要求必须以F/f标志float类型的数字
				double --- 双精度 --- 8个字节 --- -10^308~10^308 --- 小数默认为double
		字符型:
				char   --- 字符型 --- 2个字节 --- 0~2^16-1 --- 0~65535
		布尔型:
				boolean--- 布尔型 --- 表示逻辑值true/false ---内存大小根据jdk版本和操作系统来确定
	引用数据类型:数组[]   类class   接口interface

数据类型的转换
	自动类型转换/隐式转换:
		小的类型能够自动转化为大的类型
		整数能够自动转化为小数,但是可能会有精度损失
	  	字符可以自动转化为整数
	强制类型转换/显式转换:

数据的原反补三码
	任意一个数据都有原码,反码,补码这么三种形式
	数据在计算机中是以补码的形式来储存的,因此实际上计算的也是数据的补码

	对于整数,原反补三码一致
	int i = 5;
	原码: 00000000 00000000 0000000 00000101
	反码: 00000000 00000000 0000000 00000101
	补码: 00000000 00000000 0000000 00000101

	对于负数,反码是在原码的基础上最高位不变,其余位1->0,0->1;补码在反码的基础上+1
	int i = -5;
	原码: 10000000 0000000 00000000 00000101
	反码: 11111111 1111111 11111111 11111010
	补码: 11111111 1111111 11111111 11111011

	int i=200;
	原码: 0000000 0000000 00000000 11001000
	反码: 0000000 0000000 00000000 11001000
	补码: 0000000 0000000 00000000 11001000
	byte j = (byte)i;
	补码: 11001000
	反码: 11000111
	原码: 10111000
	j == -56

编码:将数据按照指定的规则转化为数字---编码表---码表
ISO-8859-1---西欧码表---1个字符1个字节
gb2312	  ---国标码表---1个字符2个字节---gbk
Unicode   ---收录了常见语言的常见字符---Java采用Unicode编码体系---utf-8---三个字节一个字符,Java文件默认使用utf-8
规定所有的码表默认兼容西欧码表
'a'---97	'A'---65	'0'---48	'\u0000'---空字符---''

转义字符
'\t'---table 制表符		'\r'---return 回车		'\n'---next/newLine 换行
'\\'--\					'\''---单引号			'\"'---双引号

运算符
	算术运算符		--- + , - , * , / , % , ++ , --
	赋值运算符		--- = , += , -= , *= , /= , %= , &= , |= , ^= , <<= , >>= , >>>=
	关系/比较运算符	--- > , < , >= , <=
	逻辑运算符		--- & , | , !
	位运算符		--- >> , <<
	三元运算符		--- ?: 

注意:
	1.byte/short/char在运算的时候会自动的提升为int
	2.整数运算完成的结果一定是整数
	3.当小类型和大类型一起运算的时候结果一定是大的类型
	4.byte b = 4 + 1; ---4和1都是常量,值确定,所以在编译的时候进行优化,编译完成之后结果就是byte b = 5;
	5./0 --- ArithmeticException---算术异常;任意一个非零小数/0或者任意一个非零数字/0.0,结果为Infinity;0.0/0或者0/0.0---NaN---Not a Number---非数字

注意:小数无法精确运算---绝大部分小数在内存中无法精确存储

注意:byte/short/char可以参与++/--运算,结果依然是原来的类型---底层做了强制转换

注意:
	1.除了=以外,其余的符号要求变量必须先有值才能使用
	2.byte/short/char可以参与赋值运算,结果依然是原来的类型---底层做了强制转换