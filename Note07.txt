复习:
	1.方法的重载:同一个类,方法名相同,参数列表不同---对应位置上的数据类型不同---方法签名:方法名+参数列表
	2.方法的传参:对于基本类型,传递的是实际值;对于引用类型,传递的是地址---传递后在地址不变的情况下,影响原来的对象;如果地址改变,则不会影响原来的对象.
	3.面向对象和面向过程:如果需要自己动手,就是面向过程;如果找别的人来动手,就是面向对象.面向过程注重的动作;面向对象强调的是对象.面向对象是基于面向过程的.---如果处理简单的事物,使用面向过程;如果处理复杂的事物,使用面向对象.
	4.类和对象的关系:类是对象的抽取;对象是类的具体化.

对象在内存的存储

成员变量(member)和局部变量(local variable):
	1.定义位置:成员变量(属性)是指定义在类方法外的变量;定义在了方法或者语句内的变量就是局部变量.
	2.作用范围:成员变量是作用在整个类内;局部变量只能作用于对应的方法或者语句中.
	3.内存位置:成员变量是存储在堆内存中,并且自动的赋予一个默认值;局部变量存在栈内存中,不会自动给默认值.
	4.生命周期:成员变量随着对象的创建而存储到堆内存中,随着对象的回收而被销毁;局部变量在方法或者语句执行完成之后立即回收.

构造方法:
	在类中与类同名,没有返回值类型的方法---构造方法---创建对象
	在类中,如果没有手动添加构造方法,那么Java会在编译的时候添加一个默认的无参构造,如果手动添加了构造方法,Java就不再添加默认的构造方法了.
	构造方法可重载.

this关键字
	在Java中,所有的非静态方法和非静态属性都是通过对象来调用的.
	this代表当前在活动的对象---可以认为是一个虚拟对象---用于在类内调用本类中的非静态方法和非静态属性的.
	this语句表示在本类中调用本类其他形式的构造函数

构造代码块
	在类方法外用{}括起来的一段代码---构造代码块/初始化代码块---在创建对象的时候先于构造方法执行

局部代码块
	在方法或者语句内部用{}括起来的一段代码---局部代码块---限制变量的使用范围和生命周期,以提高内存的利用率

面向对象的特征
	封装,继承,多态(抽象)

封装
	体现形式:
		方法:
			优点:方法能够提高代码的复用性
		属性的私有化:
			将类中的属性用private修饰,限制属性的使用范围,对外提供操作和获取这个属性的公共方法,在这些方法中可以根据场景来限制属性的值使之更符合场景要求
			优点:保证数据的合法性
		内部类:

继承
	根据一些类中的共有特征和共有的行为进行抽取,这些行为和特征抽取到一个新的类中,让原来的类通过extends关键字与新的类产生关系,这种关系称之为继承.新抽取出来的类是父类(超类/基类),原来的类就是子类(派生类).
	通过继承父类,就可以使用父类中的一部分方法和属性.
	在Java中,类和类之间支持的是单继承---一个子类只能有一个父类,但是一个父类可以有多个子类.
	类和类之间支持多重继承---继承结构树
	单继承一定比多继承好吗?---不一定.
	多继承在代码的复用性上要优于多继承
	对于多继承,如果多个父类中存在了方法签名一致的方法,子类在调用的时候会产生混乱---单继承能够很好的避免方法调用的混乱.
	作用:提高代码的复用性,避免方法调用的混乱.

super关键字
	在子类中表示父类对象的引用---代替了父类对象---虚拟对象---在子类中调用父类中的方法或者属性.
	在Java中,要创建子类对象必然先创建一个父类对象---父类对象是通过super语句来创建的.---如果子类的构造函数中没有手动提供super语句,那么默认调用父类的无参构造---super语句表示调用父类中对应形式的构造函数---如果父类只提供了含参构造,那么子类的构造函数中就得手动提供对应形式的super语句---super语句必须放在子类构造函数的第一行

权限修饰符
	修饰符\范围		本类中		子类中		同包类中	其它类
	public			可以 		可以 		可以 		可以
	protected		可以 		可以 		可以 		不可以
	默认			可以 		同包可以 	可以 		不可以
	private			可以 		不可以 		不可以 		不可以

	public > protected > 默认 > private

方法的重写
	在父子类中存在了方法签名完全一致的方法---方法的重写/覆盖
	遵循原则
		1.方法签名相同
		2.如果父类方法的返回值类型是基本类型或者void,那么子类重写的方法的返回值类型必须一致
		3.子类重写的方法的权限修饰符的范围必须要大于等于父类权限修饰符的范围
		4.如果父类方法的返回值类型是引用类型,那么子类重写的方法的返回值类型和父类方法返回值类型一致,或者子类方法的返回值是父类方法返回值类型的子类

多态
	编译时多态:
		方法的重载
		add(2, 3);---add(int, int)
		add(1, 4, 6);---add(int, int, int)
	运行时多态:
		方法的重写,向上造型---运行时多态是基于继承的
		注意:对于使用向上造型创建的对象而言,能干什么看的是父类,怎么干看的是子类.---对于使用向上造型创建的对象,不能区调用子类独有的方法.

重写的理解
	1.子类重写的方法的权限修饰符的范围要大于等于父类方法的权限修饰符的范围---否则声明和使用过程会产生矛盾
	2.子类重写的方法的返回值类型是父类方法的返回值类型的子类或者其本身---否则会产生子类接父类的情况,因为父类不一定含有子类中的方法,所以用子类对象接父类对象的情况不可行

	注意:基本类型之间的大小值得取值范围的大小,而不是说基本类型之间有继承关系.---基本类型之间是平等的

多态的作用:为了实现代码的灵活调用---解耦

static---静态
	是一个修饰符---可以修饰变量、方法、内部类、代码块

静态变量
	

final

abstract---抽象

interface---接口

内部类

包

垃圾回收机制